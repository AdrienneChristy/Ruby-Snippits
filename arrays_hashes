Adding a key/value pair to a hash looks like this:

numbers = {}
numbers["one"] = 1
puts 3 + numbers["one"]
# prints out "4"

#=========================

friends = ["Milhouse", "Ralph", "Nelson", "Otto"]

family = { "Homer" => "dad",
  "Marge" => "mom",
  "Lisa" => "sister",
  "Maggie" => "sister",
  "Abe" => "grandpa",
  "Santa's Little Helper" => "dog"
}

friends.each { |x| puts "#{x}" }
family.each { |x, y| puts "#{x} is a #{y}" }


#=========================
secret_identities = {
  "The Batman" => "Bruce Wayne",
  "Superman" => "Clark Kent",
  "Wonder Woman" => "Diana Prince",
  "Freakazoid" => "Dexter Douglas"
}
  
secret_identities.each do |id, name|
    puts "#{name}: #{id}"
end


#=========================
#Ruby hashes are just collections of key-value pairs, where a unique key is associated with some value.
#Keys must be unique, but values can repeat. 
#We can create hashes several ways, but two of the most popular are hash literal notation:

new_hash = { "one" => 1 }

#and hash constructor notation:

new_hash = Hash.new


#If you have a hash with a default value, and you try to access a non-existent key, you get that default value.
h = Hash.new("nothing here")

puts h
# {}

puts h["kitty"]
# nothing here

#=========================
# The block, {|i| puts i}, is passed the current
# array item each time it is evaluated. This block
# prints the item. 
[1, 2, 3, 4, 5].each { |i| puts i }

# This block prints the number 5 for each item.
# (It chooses to ignore the passed item, which is allowed.)
[1, 2, 3, 4, 5].each { |i| puts i*5 }


#=========================Hashes of symbols have changed in Ruby 1.9!
new_hash = { one: 1,
  two: 2,
  three: 3
}

The two changes are:

    You put the colon at the end of the symbol, not at the beginning;
    You don't need the hash rocket anymore.


#=========================Working just with keys or values
new_hash = { one: 1,
.each_key
.each_value

my_hash = { one: 1, two: 2, three: 3 }

my_hash.each_key { |k| print k, " " }
# ==> one two three

my_hash.each_value { |v| print v, " " }
# ==> 1 2 3


#=========================


.delete
#Ruby makes it easy to remove a movie/rating pair from our hash: we just write movies.delete(title)!
