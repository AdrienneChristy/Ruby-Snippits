
print "Oxnard Montalvo"
The print command just takes whatever you give it and prints it to the screen.

puts "What's up?"
puts (for "put string") is slightly different: it adds a new (blank) line after the thing you want it to print.

#=====================================
.length 
outputs length of the string
"I love espresso".length

.reverse 
outputs reversed order version of the string
"String".reverse

.upcase

.downcase

.capitalize
capitalizes the first letter of a string and makes the rest of the letters lower case.

! at the end of capitalize. This modifies the value contained within the variable answer itself. The next time you use the variable answer you will get the results of answer.capitalize
#=====================================

== 
is equal to

!=
is not equal to

#=====================================
logical or boolean operators:
Ruby has three: 
and (&&), or (||), and not (!)
Ruby's || is called an inclusive or because it evaluates to true when one or the other or both expressions are true.


assignment operators 
=, +=, -=, *=, and /=



.include? 
method which evaluates to true if it finds what it's looking for and false otherwise.

.gsub! 
method which stands for global substitution.
The syntax looks like this:
string_to_change.gsub!(/s/, "th")
/s/ has to be between slashes instead of between quotes. Note: you cannot put a space between gsub! and the bit in parentheses.

#=====================================
1...10 means "go up to but don't include 10." 
If we use two dots, this tells Ruby to include the highest number in the range.

#=====================================

.split; it takes in a string and returns an array. If we pass it a bit of text in parentheses, .split will divide the string wherever it sees that bit of text, called a delimiter. For example,

text.split(",")


#=====================================
ARRAYS
array = [5, 7, 9, 2, 0]
array[2]
# returns "9", since "9"
# is at index 2
=begin
This is called access by index.
Arrays of arrays are called multidimensional arrays.
=end
#=====================================
HASHES
a hash is a collection of key-value pairs. 

Hash literal notation looks like this:
hash = {
  key1 => value1,
  key2 => value2,
  key3 => value3
}

Shortcut:
my_hash = Hash.new

Setting a variable equal to Hash.new creates a new, empty hash; it's the same as setting the variable equal to empty curly braces ({}).
pets = Hash.new
pets["Stevie"] = "cat"
# Adds the key "Stevie" with the
# value "cat" to the hash
#=====================================

# I'm a comment!

=begin
I'm a multiline comment!
I don't need any # symbols.
Remember begin and end must be on their own lines.
=end
