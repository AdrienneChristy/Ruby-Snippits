Environment is the collection of all variables and their values that exist in the program at a given time.

Control flow gives us the flexibility to select different outcomes depending on information the user types, the result of a computation, or the value returned by another part of the program.

In Ruby, we assign values to variables using =, the assignment operator. But if we've already used = for assignment, how do we check to see if two things are equal? Well, we use ==, which is a comparator (also called a relational operator). == means "is equal to." 

Separation of concerns: assigning specific tasks to separate methods


Method Syntax

Methods are defined using the keyword def (short for "define"). Methods have three parts:

    The header, which includes the def keyword, the name of the method, and any arguments the method takes. (We'll get to arguments in the next section)
    The body, which is the code block that describes the procedures the method carries out. The body is indented two spaces by convention (as with for, if, elsif, and else statements)
    The method ends with the end keyword.


If a method takes arguments, we say it accepts or expects those arguments. 

The argument is the piece of code you actually put between the method's parentheses when you call it, and the parameter is the name you put between the method's parentheses when you define it. For instance, when we defined square above, we gave it the parameter n (for "number"), but passed it the argument 12 when we called it.

Splat arguments are arguments preceded by a *, which signals to Ruby: "Hey Ruby, I don't know how many arguments there are about to be, but it could be more than one.

It's a Ruby best practice to end method names that produce boolean values with a question mark.

Blocks are a way of creating methods that don't have a name. (These are similar to anonymous functions in JavaScript or lambdas in Python.)
1.times do
  puts "I'm a code block!"
end

1.times { puts "As am I!" }
