Environment is the collection of all variables and their values that exist in the program at a given time.

Control flow gives us the flexibility to select different outcomes depending on information the user types, the result of a computation, or the value returned by another part of the program.

In Ruby, we assign values to variables using =, the assignment operator. But if we've already used = for assignment, how do we check to see if two things are equal? Well, we use ==, which is a comparator (also called a relational operator). == means "is equal to." 

Separation of concerns: assigning specific tasks to separate methods


Method Syntax

Methods are defined using the keyword def (short for "define"). Methods have three parts:

    The header, which includes the def keyword, the name of the method, and any arguments the method takes. (We'll get to arguments in the next section)
    The body, which is the code block that describes the procedures the method carries out. The body is indented two spaces by convention (as with for, if, elsif, and else statements)
    The method ends with the end keyword.


If a method takes arguments, we say it accepts or expects those arguments. 

The argument is the piece of code you actually put between the method's parentheses when you call it, and the parameter is the name you put between the method's parentheses when you define it. For instance, when we defined square above, we gave it the parameter n (for "number"), but passed it the argument 12 when we called it.

Splat arguments are arguments preceded by a *, which signals to Ruby: "Hey Ruby, I don't know how many arguments there are about to be, but it could be more than one.

It's a Ruby best practice to end method names that produce boolean values with a question mark.

Blocks are a way of creating methods that don't have a name. (These are similar to anonymous functions in JavaScript or lambdas in Python.)
1.times do
  puts "I'm a code block!"
end

1.times { puts "As am I!" }


Abstraction is an important idea in computer science, and you can think of it as meaning "making something simpler."Passing a block to a method is a great way of abstracting certain tasks from the method and defining those tasks when we call the method. 

combined comparison operator looks like this: <=>. It returns 0 if the first operand (item to be compared) equals the second, 1 if first operand is greater than the second, and -1 if the first operand is less than the second.

A Ruby symbol ss a sort of name. It's important to remember that symbols aren't strings.

Symbols are primarily used either as hash keys or for referencing method names. 

Symbols make good hash keys for a few reasons:

    They're immutable, meaning they can't be changed once they're created;
    Only one copy of any symbol exists at a given time, so they save memory;
    Symbol-as-keys are faster than strings-as-keys because of the above two reasons.
    
    When you're looking at someone else's code, you might see .to_sym or .intern (or both!) when converting strings to symbols.
    
CRUD, for create, read, update, and delete (respectively). These are the actions you take when you update an entry in a database, ask a website for information, or write a blog post. 


#======================
Implicit Return in Ruby: For instance, if you don't tell a JavaScript function exactly what to return, it'll return undefined. For Python, the default return value is None. But for Ruby, it's something different: Ruby's methods will return the result of the last evaluated expression.

This means that if you have a Ruby method like this one:

def add(a,b)
  return a + b
end

You can simply write:

def add(a,b)
  a + b
end

And either way, when you call add(1,1), you'll get 2. 
#======================


short-circuit evaluation: Ruby doesn't look at both expressions unless it has to; if it sees

false && true

it stops reading as soon as it sees && because it knows false && anything must be false.   Because only false and nil are false values in Ruby, both strings are treated as true. Ruby knows true || anything is true, so in a || b, it only evaluates a. Since it might encounter a false in the b part of a && b, however, it has to evaluate b, which we see in the result!

#======================

If you remember, we had that weird-looking $VERBOSE = nil on line 1; this allowed us to use the old-style Prime.new from Ruby 1.8 without the interpreter yelling at us. In Ruby 1.9, we use Prime.instance instead, and the array magic is already built-inâ€”we don't have to create prime_array or loop through it ourselves! (Then again, if we'd used .instance from the start, you wouldn't have gotten to do all that cool refactoring.)
#======================

yield used within a method has a way of transferring control from the calling method to the block and back again. 

def block_test
  puts "We're in the method!"
  puts "Yielding to the block..."
  yield
  puts "We're back in the method!"
end

block_test { puts ">>> We're in the block!" }
#======================
